import path from "path";
import * as fs from "fs";
import { v4 as uuidv4 } from 'uuid';
import { app, distFolder } from "./server";
import { CommandCenterTypes, iCommandCenter, iZ21CommandCenter } from "../../common/src/dcc";
// import { CommandCenter } from "./commandcenter";
// import { CommandCenters } from "./commandcenters";
// import { Z21 } from "./z21";
// import { io } from "./io";
// import { Z21CommandCenter } from "./z21commandcenter";


export const DEVICES_FILE = path.resolve(distFolder, 'devices.json');

app.get("/devices", (req, res) => {
    const devices = DeviceManager.readDevicesFile();
    res.json(devices);
});

app.get("/devices/:id", (req, res) => {
    const { id } = req.params;
    const devices = DeviceManager.readDevicesFile();
    const device = devices.find((d) => d.uuid === id);
    if (device) {
        res.json(device);
    } else {
        res.status(404).json({ error: "Device not found" });
    }
});

// Add a new device
app.post("/devices", (req, res) => {

    const { name, type } = req.body;
    const devices = DeviceManager.readDevicesFile();

    const newDevice: any = {
        uuid: uuidv4(),
        name,
        type,
    };

    switch (type as CommandCenterTypes) {
        case CommandCenterTypes.Z21:
            const { ip, port } = req.body;
            if (!ip || !port) {
                res.status(400).json({ error: "IP address and port are required for type Z21." });
                return
            }
            newDevice.ip = ip;
            newDevice.port = port
            break;
    }

    devices.push(newDevice);
    DeviceManager.writeDevicesFile(devices);
    res.status(201).json(newDevice);
});

// Update an existing device
app.put("/devices/:id", (req, res) => {
    const { id } = req.params;
    const { name, type } = req.body;
    const devices = DeviceManager.readDevicesFile();
    //const deviceIndex = devices.findIndex((d) => d.id === id);
    const device = devices.find((d) => d.uuid === id);
    if (device) {
        const { name, type } = req.body;
        switch (type as CommandCenterTypes) {
            case CommandCenterTypes.Z21:
                const { ip, port } = req.body;
                if (!ip || !port) {
                    res.status(400).json({ error: "IP address and port are required for type Z21." });
                    return
                }

                device.name = name
                device.ip = ip;
                device.port = port

                DeviceManager.writeDevicesFile(devices)
                break;
        }

        res.json(device);
    } else {
        res.status(404).json({ error: "Device not found" });
    }
});

// Delete a device
app.delete("/devices/:id", (req, res) => {
    const { id } = req.params;
    const devices = DeviceManager.readDevicesFile();
    const initialLength = devices.length;
    const updatedDevices = devices.filter((d) => d.uuid !== id);
    if (updatedDevices.length < initialLength) {
        DeviceManager.writeDevicesFile(updatedDevices);
        res.status(204).send();
    } else {
        res.status(404).json({ error: "Device not found" });
    }
});


export class DeviceManager {

    // static connections: CommandCenters = new CommandCenters()

    // static getCC(device: iCommandCenter) : CommandCenter | undefined {
    //     var d = DeviceManager.connections.commandcenters.find((cc) => {
    //         return device.uuid == cc.uuid
    //     })
    //     return d
    // }

    // static setTurnout(turnout: iTurnout) {
    //     const cc = DeviceManager.getCC(turnout.device)
    //     if(cc) {
    //         cc.setTurnout(turnout)
    //     }
    // }
    // static setBasicDecoder(decoder: iBasicAccessory) {
    //     const cc = DeviceManager.getCC(decoder.device)
    //     if(cc) {
    //         cc.setBasicDecoder(decoder)
    //     }
    // }

    static readDevicesFile = (): any[] => {
        try {
            if (!fs.existsSync(DEVICES_FILE)) {
                fs.writeFileSync(DEVICES_FILE, JSON.stringify([], null, 2), 'utf8'); // Létrehozza az üres locos.json-t
            }
            const data = fs.readFileSync(DEVICES_FILE, 'utf8');

            const json = JSON.parse(data)
            //this.connections.commandcenters = json;
            json.forEach((c: iCommandCenter) => {
                if (c.type == CommandCenterTypes.Z21) {

                    //DeviceManager.connections.disconnect()

                    // if (!DeviceManager.connections.isExists(c.uuid!)) {
                    //     var cc = c as iZ21CommandCenter
                    //     const z21 = new Z21(cc.uuid!, cc.name, cc.ip, cc.port, io)
                    //     DeviceManager.connections.add(z21)
                    //     console.log('Z21 registered: ', z21.toString())
                    // } else {
                    //     console.log("Z21 already registered", c.uuid)
                    // }
                }
            })


            return JSON.parse(data);
        } catch (error) {
            console.error("Error reading locos.json:", error);
            return [];
        }
    };

    static writeDevicesFile = (locomotives: any[]) => {
        try {
            fs.writeFileSync(DEVICES_FILE, JSON.stringify(locomotives, null, 2), 'utf8');
        } catch (error) {
            console.error("Error writing to locos.json:", error);
        }
    };

    static init() {
        DeviceManager.readDevicesFile();

    }
}
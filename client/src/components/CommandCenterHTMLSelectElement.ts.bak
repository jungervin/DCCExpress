import { iCommandCenter } from "../../../common/src/dcc";
import { Globals } from "../helpers/globlas";

export class CommandCenterHTMLSelectElement extends HTMLElement {
    list: HTMLSelectElement;
    devices?: iCommandCenter[];
    // private devicesLoaded: Promise<void>;
    // private resolveDevicesLoaded!: () => void;
    private _onChangeCallback?: (selectedDevice: iCommandCenter | null) => void;
    constructor() {
        super()
        const shadow = this.attachShadow({ mode: 'open' });
        shadow.innerHTML = `
            <link rel="stylesheet" href="/bootstrap.css">            
            <div class="form-group">
                <div>Command Center:</div>
                <select name="device" id="device" style="min-width: 50%; height: 2em">
                <option value="na">NA</option>
                </select>
            </div>
        `
        this.list = shadow.getElementById("device") as HTMLSelectElement
        this.list.onchange = (e: Event) => {
            if (this._onChangeCallback) {
                this._onChangeCallback(this.getSelectedDevice());
            }
        };
        //this.init()
    }

    init() {
        //fetchDevices().then((data: iCommandCenter[]) => {
        this.list.innerHTML = ""
        this.devices = Globals.devices

        var opt = document.createElement("option") as HTMLOptionElement
        opt.value = "";
        opt.innerHTML = "---"
        this.list.appendChild(opt)
        for (var i = 0; i < Globals.devices.length; i++) {
            var cc = Globals.devices[i] as iCommandCenter
            var opt = document.createElement("option") as HTMLOptionElement
            opt.value = cc.uuid!;
            opt.innerHTML = cc.name
            this.list.appendChild(opt)
        }
        //this.resolveDevicesLoaded();
        //})
    }

    getSelectedDevice(): iCommandCenter | null {

        if (!this.devices) return null;
        const selectedId = this.list.value;
        return this.devices.find((device) => device.uuid === selectedId) || null;
    }

    setSelectedDevice(device: iCommandCenter | null) {
        //await this.devicesLoaded; 
        this.init()
        if (device) {
            this.list.value = device.uuid!;
            if (this._onChangeCallback) {
                this._onChangeCallback(device);
            }
        }
    }

    set onchangeCallback(callback: (selectedDevice: iCommandCenter | null) => void) {
        this._onChangeCallback = callback;
    }
}

customElements.define("command-center-select-element", CommandCenterHTMLSelectElement)
import { CommandCenterTypes, getCommandCenterType, iCommandCenter, iZ21CommandCenter } from "../../../common/src/dcc";
import * as bootstrap from "bootstrap";

declare global {
    interface HTMLButtonElement {
        commandCenter: iCommandCenter;
    }
}


export class CommandCentersEditor {
    commandCenters: iCommandCenter[] = []

    z21Modal: bootstrap.Modal | undefined;
    addModal: bootstrap.Modal;
    table: HTMLTableElement;
    z21OK: HTMLButtonElement;
    constructor(tableId: string) {

        const table = document.getElementById(tableId) as HTMLTableElement
        if (!table) throw new Error("Container not found");
        this.table = table

        this.addModal = new bootstrap.Modal(document.getElementById('addDeviceModal') as HTMLElement);

        this.z21Modal = new bootstrap.Modal(document.getElementById('Z21-MODAL') as HTMLElement);
        this.z21OK = document.getElementById("btnZ21Ok") as HTMLButtonElement;


        document.getElementById('add-device')!.onclick = (e) => {
            (document.getElementById("deviceName") as HTMLInputElement).value = "";
            (document.getElementById("deviceType") as HTMLSelectElement).value = "";
            this.addModal?.show()
        }

        document.getElementById('btnAddDevice')!.onclick = (e) => {
            // TODO: Check the values
            this.addModal?.hide()

            if ((document.getElementById("deviceType") as HTMLSelectElement).value == "0") {

                (document.getElementById("z21Ip") as HTMLInputElement).value = "";
                (document.getElementById("z21Port") as HTMLSelectElement).value = "21105";

                this.z21OK.onclick = (e) => {
                    var device: iZ21CommandCenter = {
                        uuid: undefined,
                        isLocoController: false,
                        name: (document.getElementById("deviceName") as HTMLInputElement).value,
                        type: parseInt((document.getElementById("deviceType") as HTMLSelectElement).value),
                        ip: (document.getElementById("z21Ip") as HTMLInputElement).value,
                        port: parseInt((document.getElementById("z21Port") as HTMLSelectElement).value)
                    }
                    this.saveDevice(device)
                    this.z21Modal?.hide()
                }

                this.z21Modal?.show()
            }
        }

        this.fetchDevices()
    }

    private async fetchDevices() {
        try {
            //const response = await fetch(`${document.location.origin}/devices`);
            const response = await fetch('/devices');
            this.commandCenters = await response.json();
            this.render();

        } catch (error) {
            console.error("Error fetching devices:", error);
        }
    }

    private async saveDevice(device: iCommandCenter) {
        try {
            const method = device.uuid ? "PUT" : "POST";
            const endpoint = device.uuid ? `/devices/${device.uuid}` : "/devices";
            //const endpoint = device.id ? `/devices/${device.id}` : "/devices";

            const response = await fetch(`${endpoint}`, {
                method,
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(device),
            });

            if (!response.ok) throw new Error("Failed to save device");

            await this.fetchDevices();
        } catch (error) {
            console.error("Error saving device:", error);
        }
    }

    async deleteDevice(id: string) {
        try {
            const response = await fetch(`/devices/${id}`, {
                method: "DELETE",
            });

            if (!response.ok) throw new Error("Failed to delete device");

            await this.fetchDevices();
        } catch (error) {
            console.error("Error deleting locomotive:", error);
        }
    }


    render() {
        const tbody = this.table.querySelector("tbody")
        tbody!.innerHTML = ""

        if (this.commandCenters) {
            this.commandCenters.forEach((cc) => {
                const tr = document.createElement("tr")

                const tdName = document.createElement("td")
                tdName.innerHTML = cc.name
                tr.appendChild(tdName)

                const tdType = document.createElement("td")
                tdType.innerHTML = getCommandCenterType(cc.type)
                tr.appendChild(tdType)

                const tdDefault = document.createElement("td")
                tdDefault.innerHTML = "Default"
                tr.appendChild(tdDefault)

                const tdStatus = document.createElement("td")
                tdStatus.innerHTML = "Status"
                tr.appendChild(tdStatus)

                const tdActions = document.createElement("td")
                tr.appendChild(tdActions)

                const btnEdit = document.createElement("button")
                btnEdit.className = "btn btn-primary btn-sm me-1"
                btnEdit.innerHTML = "EDIT..."
                tdActions.appendChild(btnEdit)
                
                btnEdit.commandCenter = cc
                btnEdit.onclick = (e) => {

                    (document.getElementById("z21Ip") as HTMLInputElement).value = (btnEdit.commandCenter as iZ21CommandCenter).ip;
                    (document.getElementById("z21Port") as HTMLSelectElement).value = (btnEdit.commandCenter as iZ21CommandCenter).port.toString();
                    this.z21Modal!.show()
                    this.z21OK.onclick = (e) => {
                        (btnEdit.commandCenter as iZ21CommandCenter).ip = (document.getElementById("z21Ip") as HTMLInputElement).value,
                        (btnEdit.commandCenter as iZ21CommandCenter).port = parseInt((document.getElementById("z21Port") as HTMLSelectElement).value)
                        this.saveDevice(btnEdit.commandCenter)
                        this.z21Modal?.hide()
                    }
                }


                const btnDelete = document.createElement("button")
                btnDelete.className = "btn btn-danger btn-sm"
                btnDelete.innerHTML = "DELETE..."
                tdActions.appendChild(btnDelete)
                
                btnDelete.onclick = (e) => {
                    this.deleteDevice(cc.uuid!)
                }



                tbody!.appendChild(tr)
            })
        }

    }
}

const manager = new CommandCentersEditor("cc-table");
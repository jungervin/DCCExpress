import { drawRectangle } from "../helpers/graphics";
import { BitElement } from "../components/bitElement";
import { TurnoutDoubleElement, TurnoutElement, TurnoutLeftElement, TurnoutRightElement } from "../editor/turnout";
import { Dialog, DialogResult } from "./dialog";

console.log(BitElement);

export class turnoutSelectionDialog extends Dialog {
    state1Canvas: HTMLCanvasElement | undefined;
    turnout1: TurnoutRightElement | undefined;
    state2Canvas: HTMLCanvasElement | undefined;
    turnout2: TurnoutRightElement | undefined;
    address1closeValue: BitElement | undefined;
    address1openValue: BitElement | undefined;
    constructor() {
        super();
    }

    get identity(): string {
        return 'turnoutSelectionDialog';
    }

    init() {
        super.init('doubleTurnoutDialog', 460, 600);
        this.btnOk = this.querySelector('#btnDialogOk');
        this.btnCancel = this.querySelector('#btnDialogCancel');
        this.btnOk.onclick = (e: MouseEvent) => {
            this.close(DialogResult.ok);
        }
        this.btnCancel.onclick = (e: MouseEvent) => {
            this.close(DialogResult.cancel);
        }
    }

    initTurnouts(items: TurnoutElement[]) {
        var turnoutList = this.querySelector("#turnoutList")

        items.forEach(t => {
            var row = document.createElement("div")
            row.className = "form-group row inline"
            
            var col = document.createElement("div")
            col.className = "col-sm-9"
            row.appendChild(col)

            var canvas = document.createElement("canvas")
            canvas.width = 100
            canvas.height = 100
            var ctx = canvas.getContext('2d')
            col.appendChild(canvas)

            if (t instanceof TurnoutLeftElement) {
                const to = new TurnoutLeftElement("", t.address, ctx!, 0, 0, "")
                to.angle = t.angle
                drawRectangle(ctx!, 0, 0, 79, 79)
                ctx!.translate(10, 10)
                ctx!.scale(1.5, 1.5)
                to.draw()
            } else if (t instanceof TurnoutRightElement) {
                const to = new TurnoutRightElement("", t.address, ctx!, 0, 0, "")
                to.angle = t.angle
                drawRectangle(ctx!, 0, 0, 79, 79)
                ctx!.translate(10, 10)
                ctx!.scale(1.5, 1.5)
                to.draw()
            } else if (t instanceof TurnoutDoubleElement) {
                const to = new TurnoutDoubleElement("",t.address, t.address2, ctx!, 0, 0, "")
                to.angle = t.angle
                drawRectangle(ctx!, 0, 0, 79, 79)
                ctx!.translate(10, 10)
                ctx!.scale(1.5, 1.5)
                to.draw()
            }

            var cbdiv = document.createElement("div")
            cbdiv.className = "form-check"
            col.appendChild(cbdiv)

            var cb = document.createElement("input")
            cb.id = t.name
            cb.className = "form-check-input"
            cb.type = "checkbox"
            cbdiv.appendChild(cb)

            var label = document.createElement("label")
            label.className = "form-check-label"
            label.innerHTML = ' ' + t.name
            label.htmlFor = t.name
            cbdiv.appendChild(label)

            turnoutList!.appendChild(row)
        });
    }


    get template(): string {

        return `
<div class="dialog">    
<h1>Properties</h1>    
<form>

  <div class="form-group row">
    <label for="routeName" class="col-sm-3 col-form-label">Name</label>
    <div class="col-sm-9">
      <input type="text" class="form-control" id="routeName">
    </div>
  </div>
    
  <div id="turnoutList" style="height: 400px; overflow: auto"></div>

  
  <div class="form-group row">
    <div class="offset-4 col-8">
      <button id="btnDialogCancel" class="btn btn-primary">CANCEL</button>
      <button id="btnDialogOk" class="btn btn-primary">OK</button>
    </div>
  </div>
</form>        
</div>
        `
    }
}
customElements.define('turnout-selection-dialog', turnoutSelectionDialog);